import 'package:ecommerce/models/item.dart';
import 'package:ecommerce/services/item_services.dart';
import 'package:flutter/material.dart';

//used to create or edit an item
//the UI is goign to be rebuild according to state so we use StatefulWidget
class ItemForm extends StatefulWidget {
  //those are part of widget configuration thats why we placed them here
  final Item? item; //optional, passed when editing an item
  final Function(Item)? onItemCreated; //callback function when created
  final Function(Item)? onItemUpdated; //callback function when updated

  const ItemForm(
      {super.key, this.item, this.onItemCreated, this.onItemUpdated});

  //creating the state object
  //starting point of the life cycle
  @override
  State<ItemForm> createState() => _ItemFormState();
}

//corresponding state class of the above Stateful widget
class _ItemFormState extends State<ItemForm> {
  //a key to uniquely identify the form widget and its state
  //important in form handling and validation
  //GlobalKey, unique identifier for widgets in widget tree, allows us to access the widget from outside the build method
  //FormState, state associated with form widget, conatins save and validate methods thata re used to interact with form
  //this helps us to manage the form from outside the form widget (its like a key reefrence)
  //in dart _ means private
  final _formKey = GlobalKey<FormState>();

  //used to perform API operations
  final ItemService itemService = ItemService();

  //to control the texts being edited in the TextFormField wiget
  //they are initialized with values from widget.item in initState
  //late means that the varaible will be initialezed at later point but before it is accessed
  //we use late when initialization depends on some logic or needs to be done in a specfic life cycle method
  //TextEditinController is a class in flutter used to control and listen to changes in a text field, allows us to get current value,
  //set a new value and clear it
  late TextEditingController _idController;
  late TextEditingController _nameController;
  late TextEditingController _descriptionController;
  late TextEditingController _priceController;
  late TextEditingController _stockController;

  //called when the state is created, part of widget lifecycle
  //used to initialize state related variables or work that need to happean once when the widget is inserted in widget tree
  //usually used for initialize the controller with exisiting values
  //this method is called exactly once, after it we call the build method to render the UI
  @override
  void initState() {
    super.initState();

    //here the initial text is set to id, if it exists we call the toString and if item is null the default is an empty string
    //we use widget. to access stuff defined in the widget above here in the state class
    //if we want to edit an item the controllers are initialzed with its original data
    //if for creating its initialized with empty strings
    _idController =
        TextEditingController(text: widget.item?.id.toString() ?? '');
    _nameController = TextEditingController(text: widget.item?.name ?? '');
    _descriptionController =
        TextEditingController(text: widget.item?.description ?? '');
    _priceController =
        TextEditingController(text: widget.item?.price.toString() ?? '');
    _stockController =
        TextEditingController(text: widget.item?.stock.toString() ?? '');
  }

  //clear controller to avoid memory leaks
  //when the state object is removed from widget tree, the resources are cleaned up
  //this is used when widget is permenantly removed from widget tree
  @override
  void dispose() {
    _idController.dispose();
    _nameController.dispose();
    _descriptionController.dispose();
    _priceController.dispose();
    _stockController.dispose();
    super.dispose();
  }

  //form submit
  //validate the form, creates or update an item and calls the appropriate callback then navigate back to pervious screen
  //this is a function
  submit() async {
    //we validate the content of the form
    if (_formKey.currentState!.validate()) {
      Item item = Item(
        //! to assert that its not null, passed from parent widget
        id: widget.item
            ?.id, //this will be null when the item is first created becuase its generated by the backend
        name: _nameController.text,
        description: _descriptionController.text,
        price: double.parse(_priceController.text),
        stock: int.parse(_stockController.text),
      );

      if (widget.item != null) {
        await itemService.update(widget.item!.id!, item);
        widget.onItemUpdated?.call(item);
      } else {
        Item createdItem = await itemService.create(item);

        //calling onItemCreated callback if its not null, we pass the created item, this is a way to notift the parent widget that
        //an item has been created

        widget.onItemCreated?.call(createdItem);
        // ignore: use_build_context_synchronously
        Navigator.pop(context, createdItem);
        return;
      }

      //in flutter this is used to remove the top-most route from the navigation stack and return to previous screen
      //so this takes us to the screen that was visible before then one when we finish submitting the form
      // ignore: use_build_context_synchronously
      // ignore: use_build_context_synchronously

      // ignore: use_build_context_synchronously
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.item != null ? 'Edit Item' : 'New Item',
            style: const TextStyle(color: Color.fromARGB(255, 110, 39, 63))),
        iconTheme: const IconThemeData(color: Color.fromARGB(255, 110, 39, 63)),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            //arrange children in vertical line
            children: [
              //if we are updating ID is shown, while if we are creating no need to show it
              // Display ID (Optional)
              if (widget.item != null)
                TextFormField(
                  style:
                      const TextStyle(color: Color.fromARGB(255, 110, 39, 63)),
                  controller: _idController,
                  decoration: const InputDecoration(
                      labelText: 'ID', //setting the label for the field
                      labelStyle: TextStyle(
                          fontSize: 23,
                          fontWeight: FontWeight.bold,
                          color: Color.fromARGB(255, 110, 39, 63))),
                  enabled: false, // Make ID field read-only
                ),
              TextFormField(
                style: const TextStyle(color: Color.fromARGB(255, 110, 39, 63)),
                controller: _nameController,
                decoration: const InputDecoration(
                    labelText: 'Name',
                    labelStyle: TextStyle(
                        fontSize: 23,
                        fontWeight: FontWeight.bold,
                        color: Color.fromARGB(255, 110, 39, 63))),
                //takes the current value from the field and validate it
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a name';
                  }
                  if (!RegExp(r'^[a-zA-Z\s]+$').hasMatch(value)) {
                    return 'Please enter only letters';
                  }
                  return null;
                },
              ),
              TextFormField(
                style: const TextStyle(color: Color.fromARGB(255, 110, 39, 63)),
                controller: _descriptionController,
                decoration: const InputDecoration(
                    labelText: 'Description',
                    labelStyle: TextStyle(
                        fontSize: 23,
                        fontWeight: FontWeight.bold,
                        color: Color.fromARGB(255, 110, 39, 63))),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  if (!RegExp(r'^[a-zA-Z\s]+$').hasMatch(value)) {
                    return 'Please enter only letters';
                  }
                  return null;
                },
              ),
              TextFormField(
                style: const TextStyle(color: Color.fromARGB(255, 110, 39, 63)),
                controller: _priceController,
                decoration: const InputDecoration(
                    labelText: 'Price',
                    labelStyle: TextStyle(
                        fontSize: 23,
                        fontWeight: FontWeight.bold,
                        color: Color.fromARGB(255, 110, 39, 63))),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a price';
                  }
                  if (double.tryParse(value)! <= 0) {
                    return 'Please enter a positive price value';
                  }
                  return null;
                },
              ),
              TextFormField(
                style: const TextStyle(color: Color.fromARGB(255, 110, 39, 63)),
                controller: _stockController,
                decoration: const InputDecoration(
                    labelText: 'Stock',
                    labelStyle: TextStyle(
                        fontSize: 23,
                        fontWeight: FontWeight.bold,
                        color: Color.fromARGB(255, 110, 39, 63))),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the stock quantity';
                  } else if (double.tryParse(value)! <= 0) {
                    return 'please enter a positive quantity';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 40),
              ElevatedButton(
                onPressed: submit,
                child: Text(
                  widget.item != null ? 'Update' : 'Create',
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
